// Grid settings
$column-numbers: 12
$column-width: 100% / $column-numbers
$size-grid-gutter: 															sizes(base)
// Idea?
$screen-padding: null 

// $susy: (
//   columns: 12,
//   gutter-position: inside,
//   math: fluid,
//   output: float,
//   flow: rtl,
// );

// margin-right: gutter();

=grid($value)
	float: left
	width: (100% / $column-numbers) * $value


section
	&.padded
		padding: sizes(triple) 0 

%container
	+clearfix
	position: relative
	margin: auto
	// Keep some padding between contents and browser edge.
	width: 100%
	padding: 0 sizes(double)

.container-wide
	@extend %container
	max-width: 1000px

.container-narrow
	@extend %container
	max-width: 700px

.container-fluid
	@extend %container

// Grid settings
$column-numbers: 12
$column-width: 100% / $column-numbers

// Generate gutter widths
@each $size, $var in $sizes
	.gutter-#{$size}
		margin-left: -($var) !important
		margin-right: -($var) !important
		> [class^="column"], > li
			padding: 0 $var !important

// Generates classes for columns 1 - 12.
@for $i from 1 through $column-numbers
	.columns-#{$i}
		width: 100%
		margin-bottom: sizes(double)
		padding: 0 sizes(base)
		float: left
		+respond(device-medium)
			width: $i * $column-width
			

@for $i from 1 through $column-numbers
	.flex-grid-#{$i}
		+nobullet
		display: flex
		flex-wrap: wrap
		margin-left: -(sizes(base))
		margin-right: -(sizes(base))
		> li
			width: 100% / $i
			padding: 0 sizes(base)
			margin-bottom: sizes(double)
			&:nth-last-child(-n+#{$i})
				margin-bottom: 0

// Generates classes for column offsets.
@for $i from 1 through $column-numbers
	.offset-#{$i}
		margin-left: $i * $column-width

// Grid Container & Helper Classes
// Start with a row container. Inside the roe container, use the columns. The module or component is then place dinside each column.
.row, .flex-row
	+clearfix
	position: relative
	+respond(device-medium)
		margin-left: -(sizes(base))
		margin-right: -(sizes(base))
		> [class^="column"]
			padding: 0 sizes(base)




